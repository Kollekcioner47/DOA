#создаём файл в каталоге, настроеном в init_config.txt
touch app.py
#проверяем лог
git log
#видим, что нет ни одного коммита
#давайте проверим статус  git
git status
#Мы увидим, что нечего добавлять в коммит, но есть неостлеживаемые файлы
#файлы есть в двух состояниях tracked - отслеживаемые и untracked неотслеживаемые
#также есть статусы файла: modified- изменённые отслеживаемые файлы, staged - подготовленые к коммиту и находящиеся в индексе отслеживания, добавляются командой git add %filename% и commited - подтверждённые, добавляются командой git commit -m "Коментарий коммита"
#добавляем наш файл в индекс
git add app.py
#снова проверяем статус и видим, что наш файл стал подготовленным к коммиту
git status
#производим коммит
git commit -m "Init commit"
#Посмотрим наш коммит
git log
#Посмотреть коммит с коментарием
git log -p
# изменим наш файл добавив туда текст print("Hello. World!")
echo 'print("Hello. World!")' >> app.py
#после проверим наш файл
cat app.py
#проверяем статус и увидим, что файл изменён
git status
#Всё пропало это изменение внёс подлый диверсант! как же нам откатиться к последнему коммиту? Надо отменить измения, произодешие после коммита!
git restore app.py
#после проверим наш файл
cat app.py
#Диверсия была преодалена! Вы молодец!
#Посмотреть какие изменения произошли с последнего коммита
git diff
#Будет пусто, ведь мы отменили изменения, вернём их обратно и посмотрим изменения
echo 'print("Hello. World!")' >> app.py
git diff
#изменения в индексе, которые ещё не в коммите можно посмотреть командой 
git diff --staged
#Закоммитим наши изменения
git commit -m "Refactoring"
#проверим лог наших коммитов
git log
#мы можем переименовать и/или перемащеть файлы с помощью команды git mv, давайте переименуем наш файл
git mv app.py my_app.py
#проверяем статус и увидим, что файл изменён
git status
#Закоммитим наши изменения
git commit -m "Rename app"
#Удалить файл
git rm my_app.py
#проверяем статус и увидим, что файл удалён
git status
#Смотрим каталог и видим, что файл тоже пропал!!
ls -la
#А мы хотели только из коммита его убрать, для этого надо использовать другой способ, сначала удаляем файл из stage
git restore --staged my_app.py
#Восстанавливаем сам файл
git restore my_app.py
#проверяем статус и увидим, что файл убран из индекса
git status
#Смотрим каталог и видим, что файл вернулся
ls -la
#если мы хотим удалить файл из отслеживания, но не из файловой системы используем другую команду
git rm --cached my_app.py
#проверяем и видим, что файл убран и неотслеживается, но при этом остался в файловой системе
git status
ls -la
#Добавим файл обратно в отслеживание 
git add my_app.py
#добавим ещё строчку
echo 'print("Some string")' >> app.py
#Посмотрим статус и увидим, что и изменения есть и файл новый, потому что гит запомнил что вы через add добавляли первые изменения, и если сделать коммит, то вторая строчка в него не попадёт, а чтобы попала надо сделать ещё один add и так каждый раз, когда вы добавляете изменения в stage, но не коммитите при этом
git status
git add my_app.py
git status
#Закоммитим и посмотрим лог
git commit -m "Refactoring"
#Копируем хэш и смотрим лог
git log %hash%
#Как создать файлы, которые вы не хотите отслеживать и при этом не хотите видеть их в статусе как неотслеживаемые? Давайте создадим каталог и файл для лога нашего приложения
mkdir log
cd log
touch log.txt
cd ..
git status
#Мы видим, что появился новый католог
#создадим файл игнорирования 
touch .gitignore
добавляем инструкцию игнорирования
echo 'log/' >> .gitignore
git status
#Видим, что папка пропала, но появился файл .gitignore, его уже нужно добавлять в отслеживание 
git add .gitignore
git commit -m "add ignore"
